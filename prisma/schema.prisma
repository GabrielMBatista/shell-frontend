generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(uuid())
  name          String?
  email         String   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  hashedPassword String?
  accounts      Account[]
  sessions      Session[]
  assistantProfile AssistantProfile? 
}


model Account {
  id                 String  @id @default(uuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AssistantProfile {
  id            String   @id @default(uuid())
  userId        String   @unique
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  name          String   @default("Gabs.IA")
  avatarUrl     String?  // Link da imagem (CDN, local, etc.)
  avatarBase64  String?  // Base64 da imagem como fallback
  personality   String   @default("neutro") // Ex: bem-humorado, s√©rio...
  model         String   @default("gpt-3.5-turbo")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}
