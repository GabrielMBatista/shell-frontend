{
  "pageTitle": "Projects",
  "hero": {
    "title": "My Projects",
    "highlight": "Highlights",
    "subtitle": "Explore the projects I developed using modern technologies."
  },
  "categories": {
    "all": "All Projects",
    "frontend": "Frontend",
    "backend": "Backend",
    "fullstack": "Full Stack",
    "mobile": "Mobile"
  },
  "featured": {
    "title": "Featured Projects",
    "label": "Featured",
    "demo": "View Demo",
    "code": "Code"
  },
  "all": {
    "title": "All Projects",
    "note": "Here you’ll find the projects I’ve developed and shared publicly, whether to practice, explore new ideas, or enhance my skills..",
    "demo": "View Demo",
    "code": "Code",
    "features": {
      "title": "Main Features",
      "item1": "Efficient management of SSE connections",
      "item2": "Real-time message sending",
      "item3": "Easy integration with Node.js applications"
    }
  },
  "noResults": {
    "title": "No projects found",
    "subtitle": "Try adjusting the filters or search term."
  },
  "search": {
    "placeholder": "Search projects..."
  },
  "cta": {
    "title": "Interested in working with me?",
    "description": "Get in touch so we can discuss how I can help with your project.",
    "primary": "Contact Me"
  },

  "items": {
    "1": {
      "title": "Interview AI",
      "description": "Basic system that uses the OpenAI API to evaluate technical levels, speeding up the screening process.",
      "gabs": {
        "card": "Technical screening MFE with voice: question→audio answer flow, transcription and LLM analysis. Explore latency, speech UX and Module Federation isolation.",
        "demoButton": "Opens a modal with the project running in an iframe. See the full interview flow (question, voice answer, analysis and summary).",
        "githubButton": "Opens the repository with the MFE code, OpenAI integration (text/speech) and modular organization."
      }
    },
    "2": {
      "title": "Tropa Login",
      "description": "Technical test for a LinkedIn job application, aimed at building a functional login screen.",
      "gabs": {
        "card": "Next.js (React 19) login screen with validation, error feedback and integration with state/requests. Shows clean and accessible UI patterns.",
        "demoButton": "Opens the functional login prototype. Test validations, loading/error states and transitions.",
        "githubButton": "Repository with the technical test code: folder structure, data hooks (React Query) and styles with Styled Components."
      }
    },
    "3": {
      "title": "Alphabet Recorder",
      "description": "Technical test Audio recorder to train alphabet phonemes, with a simple and practical interface.",
      "gabs": {
        "card": "Phoneme training app: record, play back and recognize speech. Focus on mic UX, accessibility and simplicity of the flow.",
        "demoButton": "Opens the demo with microphone permission. Record a phoneme, play it back and see real-time recognition.",
        "githubButton": "Implementation with React Mic/Speech Recognition, component organization and TypeScript typing."
      }
    },
    "4": {
      "title": "UI Library - StencilJS",
      "description": "Reusable web components library built with StencilJS and integrated with Storybook.",
      "gabs": {
        "card": "Design System in Web Components: theme tokens, slots, typed props and docs in Storybook. Think cross-framework reuse.",
        "demoButton": "Opens Storybook. Browse components, read controls/props and tweak themes with CSS vars.",
        "githubButton": "Repository of the UI Library: Stencil build, Jest tests and Web Components usage examples."
      }
    },
    "5": {
      "title": "SSE Manager - Node.js",
      "description": "Backend library developed in Node.js and TypeScript for real-time communication via Server-Sent Events (SSE), with efficient management of multiple clients and selective message sending.",
      "gabs": {
        "card": "Node/TS core for SSE: multiple clients, selective broadcast and connection cleanup. Focus on the API and efficient management.",
        "demoButton": "This project has no visual demo. Check GitHub for the API and usage examples.",
        "githubButton": "Opens the repository with the API, broadcast/unicast examples and performance/cleanup strategies."
      }
    },
    "6": {
      "title": "Interview API",
      "description": "Node.js and TypeScript backend API for managing technical interviews, featuring BullMQ queues, Prisma persistence, and OpenAI integration.",
      "gabs": {
        "card": "Node/TS API with REST endpoints for interviews, queue processing, and OpenAI-powered evaluation/transcription.",
        "demoButton": "No visual demo. Use the endpoints to test the full interview flow.",
        "githubButton": "Opens the backend repository with Express, Prisma, BullMQ, and OpenAI integration."
      }
    }
  }
}
